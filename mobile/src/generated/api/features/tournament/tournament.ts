/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Hermes
 * OpenAPI spec version: 0.0.1
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  ModelNotFoundExceptionResponse,
  TournamentsShow200
} from '../../models'



export const tournamentsShow = (
    tournament: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TournamentsShow200>> => {
    
    return axios.get(
      `/tournaments/${tournament}`,options
    );
  }


export const getTournamentsShowQueryKey = (tournament: string,) => {
    return [`/tournaments/${tournament}`] as const;
    }

    
export const getTournamentsShowQueryOptions = <TData = Awaited<ReturnType<typeof tournamentsShow>>, TError = AxiosError<ModelNotFoundExceptionResponse>>(tournament: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tournamentsShow>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTournamentsShowQueryKey(tournament);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tournamentsShow>>> = ({ signal }) => tournamentsShow(tournament, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(tournament), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tournamentsShow>>, TError, TData> & { queryKey: QueryKey }
}

export type TournamentsShowQueryResult = NonNullable<Awaited<ReturnType<typeof tournamentsShow>>>
export type TournamentsShowQueryError = AxiosError<ModelNotFoundExceptionResponse>

export const useTournamentsShow = <TData = Awaited<ReturnType<typeof tournamentsShow>>, TError = AxiosError<ModelNotFoundExceptionResponse>>(
 tournament: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tournamentsShow>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getTournamentsShowQueryOptions(tournament,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



